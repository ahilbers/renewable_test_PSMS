
import:
    - 'techs.yaml'
    - 'locations.yaml'

model:
    name: 6-region model
    calliope_version: 0.6.10
    timeseries_data_path: ''

run:
    # minimise sum of monetary install and generation costs -- no emissions in objective function
    objective_options.cost_class.monetary: 1
    solver: cbc  # `gurobi` is faster but requires a license
    zero_threshold: 1e-10  # round any value smaller to 0

overrides:
    plan:
    # planning mode -- determine capacities
        run.mode: plan
        # finish time series with same storage as at beginning
        run.cyclic_storage: False
    continuous:
    # continuous baseload capacity
        techs.baseload_region1.constraints.energy_cap_max: inf
        techs.baseload_region3.constraints.energy_cap_max: inf
        techs.baseload_region6.constraints.energy_cap_max: inf
    integer:
    # baseload capacity in units of 3GW
        techs.baseload_region1.constraints.units_max: inf
        techs.baseload_region1.constraints.energy_cap_per_unit: 3
        techs.baseload_region3.constraints.units_max: inf
        techs.baseload_region3.constraints.energy_cap_per_unit: 3
        techs.baseload_region6.constraints.units_max: inf
        techs.baseload_region6.constraints.energy_cap_per_unit: 3
    allow_unmet:
    # plan mode only -- unmet always allowed in operate mode
        techs.unmet_region2.costs.monetary.energy_cap: 0
        techs.unmet_region4.costs.monetary.energy_cap: 0
        techs.unmet_region5.costs.monetary.energy_cap: 0
    operate:
    # operate mode -- fixed capacities
        run:
            mode: operate
            cyclic_storage: False
            operation:

                # operate model can solve problems in sequential planning horizons and windows
                horizon: 332880  # hours, solve full problem in one window for now
                window: 332880  # hours, solve full problem in one window for now
        techs:
            # cyclic storage doesn't work in operate mode since we solve problems in horizons and
            # windows -- so start with 0 storage and finish with 0 storage for energy conservation
            storage_region2.constraints.storage_initial: 0
            storage_region5.constraints.storage_initial: 0
            storage_region6.constraints.storage_initial: 0
    ramping:
        techs.baseload_region1.constraints.energy_ramping: 0.2  # frac/hr
        techs.baseload_region3.constraints.energy_ramping: 0.2  # frac/hr
        techs.baseload_region6.constraints.energy_ramping: 0.2  # frac/hr
    gurobi:
    # run with gurobi (faster commercial solver)
        run.solver: gurobi
